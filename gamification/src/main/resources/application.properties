spring.application.name=gamification
server.port=8081
# Gives us access to the H2 database web console
spring.h2.console.enabled=true
# Creates the database in a file
spring.datasource.url=jdbc:h2:file:~/gamification;AUTO_SERVER=TRUE
# Creates or updates the schema if needed
spring.jpa.hibernate.ddl-auto=update
# For educational purposes we will show the SQL in console
# spring.jpa.show-sql=true

#config both on the producer and consumer as we donot know which one will start first
kafka.attempts=attempts.topic
kafka.attempts.partitions=4
kafka.attempts.replica-count=2

logging.level.org.springframework.kafka.core.KafkaAdmin=DEBUG
#spring.config.import=optional:consul:
spring.cloud.compatibility-verifier.enabled=false

spring.kafka.template.observation-enabled=true
spring.kafka.listener.observation-enabled=true
spring.kafka.bootstrap-servers=${SPRING_CLOUD_KAFKA_HOST:localhost}:9094
spring.kafka.consumer.group-id=gamification
spring.kafka.consumer.auto-offset-reset=latest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
#spring.kafka.consumer.properties.spring.json.use.type.headers=false
#spring.kafka.consumer.properties.spring.json.value.default.type=microservices.book.event.challenge.ChallengeSolvedEvent

##working with default logback configuration for distributed tracing
logging.pattern.level=[${spring.application.name:-},%X{traceId:-},%X{spanId:-}]
logging.include-application-name=false
management.tracing.sampling.probability=1

management.zipkin.tracing.endpoint=http://${SPRING_CLOUD_ZIPKIN_HOST:localhost}:9411/api/v2/spans
spring.cloud.consul.host=${SPRING_CLOUD_CONSUL_HOST:localhost}
spring.cloud.consul.port=8500

#---  ###docker profile
spring.config.activate.on-profile=docker
spring.kafka.bootstrap-servers=${SPRING_CLOUD_KAFKA_HOST}:9092

