spring.application.name=multiplication
# Gives us access to the H2 database web console
spring.h2.console.enabled=true
# Creates the database in a file
spring.datasource.url=jdbc:h2:file:~/multiplication;AUTO_SERVER=TRUE
# Creates or updates the schema if needed
spring.jpa.hibernate.ddl-auto=update
# For educational purposes we will show the SQL in console
# spring.jpa.show-sql=true

kafka.attempts=attempts.topic
kafka.attempts.partitions=4
kafka.attempts.replica-count=1

logging.level.org.springframework.kafka.core.KafkaAdmin=DEBUG
#spring.config.import=optional:consul:

#multiplication app as a producer
spring.kafka.bootstrap-servers=${SPRING_CLOUD_KAFKA_HOST:localhost}:9094
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.template.observation-enabled=true
spring.kafka.listener.observation-enabled=true

##working with default logback configuration for distributed tracing
logging.pattern.level=[${spring.application.name:-},%X{traceId:-},%X{spanId:-}]
logging.include-application-name=false
management.tracing.sampling.probability=1
management.zipkin.tracing.endpoint=http://${SPRING_CLOUD_ZIPKIN_HOST:localhost}:9411/api/v2/spans
spring.cloud.consul.host=${SPRING_CLOUD_CONSUL_HOST:localhost}
spring.cloud.consul.port=8500


##logging.level.org.apache.kafka.clients.producer=DEBUG ##lead to deadlock

#---
spring.config.activate.on-profile=docker
spring.kafka.bootstrap-servers=${SPRING_CLOUD_KAFKA_HOST}:9092